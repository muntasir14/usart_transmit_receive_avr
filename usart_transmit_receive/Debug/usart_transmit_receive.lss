
usart_transmit_receive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000d6  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b7  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000532  00000000  00000000  000007af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022b  00000000  00000000  00000ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00000f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000344  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000076  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000133a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	2e c0       	rjmp	.+92     	; 0x74 <__vector_11>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 ed       	ldi	r30, 0xD6	; 214
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	13 d0       	rcall	.+38     	; 0x70 <main>
  4a:	43 c0       	rjmp	.+134    	; 0xd2 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <show_result_init>:
		sei();
		show_result_init();
	}

	void show_result_init() {
		DDRC = 0xff;
  4e:	8f ef       	ldi	r24, 0xFF	; 255
  50:	84 bb       	out	0x14, r24	; 20
		DDRD |= (1 << 6);
  52:	81 b3       	in	r24, 0x11	; 17
  54:	80 64       	ori	r24, 0x40	; 64
  56:	81 bb       	out	0x11, r24	; 17
  58:	08 95       	ret

0000005a <receive_init>:
}

#ifdef RCV
	void receive_init() {
	
		UCSRB |= (1 << RXEN) | (1 << RXCIE);
  5a:	8a b1       	in	r24, 0x0a	; 10
  5c:	80 69       	ori	r24, 0x90	; 144
  5e:	8a b9       	out	0x0a, r24	; 10
		UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
  60:	80 b5       	in	r24, 0x20	; 32
  62:	86 68       	ori	r24, 0x86	; 134
  64:	80 bd       	out	0x20, r24	; 32
		UBRRL = 0x33;
  66:	83 e3       	ldi	r24, 0x33	; 51
  68:	89 b9       	out	0x09, r24	; 9
		sei();
  6a:	78 94       	sei
		show_result_init();
  6c:	f0 df       	rcall	.-32     	; 0x4e <show_result_init>
  6e:	08 95       	ret

00000070 <main>:
#endif

int main(void)
{
	#ifdef RCV
		receive_init();
  70:	f4 df       	rcall	.-24     	; 0x5a <receive_init>
  72:	ff cf       	rjmp	.-2      	; 0x72 <main+0x2>

00000074 <__vector_11>:
	void show_result_init() {
		DDRC = 0xff;
		DDRD |= (1 << 6);
	}
	
	ISR(USART_RXC_vect) {
  74:	1f 92       	push	r1
  76:	0f 92       	push	r0
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	0f 92       	push	r0
  7c:	11 24       	eor	r1, r1
  7e:	8f 93       	push	r24
  80:	9f 93       	push	r25
  82:	ef 93       	push	r30
  84:	ff 93       	push	r31
		uint8_t temp = UDR % 10;
  86:	9c b1       	in	r25, 0x0c	; 12
  88:	ed ec       	ldi	r30, 0xCD	; 205
  8a:	9e 9f       	mul	r25, r30
  8c:	e1 2d       	mov	r30, r1
  8e:	11 24       	eor	r1, r1
  90:	e6 95       	lsr	r30
  92:	e6 95       	lsr	r30
  94:	e6 95       	lsr	r30
  96:	ee 0f       	add	r30, r30
  98:	8e 2f       	mov	r24, r30
  9a:	88 0f       	add	r24, r24
  9c:	88 0f       	add	r24, r24
  9e:	e8 0f       	add	r30, r24
  a0:	9e 1b       	sub	r25, r30
		PORTC = seven_segment_digits[temp];
  a2:	e9 2f       	mov	r30, r25
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	e0 5a       	subi	r30, 0xA0	; 160
  a8:	ff 4f       	sbci	r31, 0xFF	; 255
  aa:	80 81       	ld	r24, Z
  ac:	85 bb       	out	0x15, r24	; 21
		if(seven_segment_digits[temp] & (1 << 6)) {
  ae:	86 ff       	sbrs	r24, 6
  b0:	04 c0       	rjmp	.+8      	; 0xba <__vector_11+0x46>
			PORTD |= (1 << 6);
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	82 bb       	out	0x12, r24	; 18
  b8:	03 c0       	rjmp	.+6      	; 0xc0 <__vector_11+0x4c>
		} else {
			PORTD &= ~(1 << 6);
  ba:	82 b3       	in	r24, 0x12	; 18
  bc:	8f 7b       	andi	r24, 0xBF	; 191
  be:	82 bb       	out	0x12, r24	; 18
		}
	}
  c0:	ff 91       	pop	r31
  c2:	ef 91       	pop	r30
  c4:	9f 91       	pop	r25
  c6:	8f 91       	pop	r24
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
